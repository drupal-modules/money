<?php
// $Id$

/**
 * @file
 * This module defines the "money" CCK field. It uses the Currency API, which
 * is included in the Currency module, to get a list of valid currencies.
 * It also uses the Format Number API to display amounts with site/user defined
 * decimal point and thousands separator.
 */

/**
 * Implementation of hook_theme().
 */
function money_theme() {
  return array(
    'money_widget' => array('arguments' => array('element' => NULL)),
    'money_formatter_default' => array('arguments' => array('element' => NULL), 'function' => 'theme_money_formatter_generic'),
    'money_formatter_nozeros' => array('arguments' => array('element' => NULL), 'function' => 'theme_money_formatter_generic'),
    'money_formatter_unformatted' => array('arguments' => array('element' => NULL)),
  );
}

/**
 * Implementation of hook_field_info().
 */
function money_field_info() {
  return array('money' => array('label' => t('Money')));
}

/**
 * Implementation of hook_field_settings().
 */
function money_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      $form['precision'] = array(
        '#type' => 'select',
        '#title' => t('Precision'),
        '#options' => drupal_map_assoc(range(1, 20)),
        '#default_value' => (is_numeric($field['precision']) && (int)$field['precision'] > 0 ? $field['precision'] : 10),
        '#description' => t('The total number of digits to store in the database, including digits to the right of the decimal point.'),
      );
      $form['decimals'] = array(
        '#type' => 'select',
        '#title' => t('Decimals'),
        '#options' => drupal_map_assoc(range(0, ($field['type'] == 'formatted_float' ? 20 : 4))),
        '#default_value' => (is_numeric($field['decimals']) && (int)$field['decimals'] >= 0 ? $field['decimals'] : 2),
        '#description' => t('The number of digits to the right of the decimal point.'),
      );
      $form['allowed_currencies'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Available currencies'),
        '#options' => currency_api_get_list(),
        '#default_value' => (isset($field['allowed_currencies']) && is_array($field['allowed_currencies']) ? $field['allowed_currencies'] : array()),
        '#description' => t('Choose the currencies that you want to allow. Do not select any currency to allow them all.'),
        '#prefix' => '<div class="money-field-currency-checkboxes">', '#suffix' => '</div>',
      );
      formatted_number_add_js();
      drupal_add_css(drupal_get_path('module', 'money') .'/money.css');
      return $form;

    case 'save':
      return array('precision', 'decimals', 'allowed_currencies');

    case 'database columns':
      $precision = (isset($field['precision']) ? $field['precision'] : 10);
      $decimals = (isset($field['decimals']) ? $field['decimals'] : 2);
      return array(
        'amount' => array('type' => 'numeric', 'precision' => $precision, 'scale' => $decimals, 'not null' => FALSE, 'sortable' => TRUE),
        'currency' => array('type' => 'varchar', 'length' => 3, 'not null' => FALSE, 'sortable' => TRUE),
      );
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function money_content_is_empty($item, $field) {
  return !is_numeric($item['amount']);
}

/**
 * Implementation of hook_field().
 */
function money_field($op, &$node, $field, &$items, $teaser, $page) {
  if ($op == 'validate') {
    if (is_array($items)) {
      foreach ($items as $delta => $item) {
        $error_element = (isset($item['_error_element']) ? $item['_error_element'] : '');
        if (is_array($item) && isset($item['_error_element'])) {
          unset($item['_error_element']);
        }
        $errors = array_merge(
          formatted_number_validate_field_value($field, $item['amount']),
          money_validate_field_value($field, $item['amount'], $item['currency'])
        );
        if (!empty($errors)) {
          foreach ($errors as $message) {
            form_set_error($error_element, $message);
          }
        }
      }
    }
  }
}

/**
 * Implementation of hook_field_formatter_info().
 */
function money_field_formatter_info() {
  return array(
    'default' => array('label' => t('Default'), 'field types' => array('money')),
    'nozeros' => array('label' => t('Remove redundant zeros'), 'field types' => array('money')),
    'unformatted' => array('label' => t('Unformatted'), 'field types' => array('money')),
  );
}

/**
 * Implementation of hook_widget_info().
 */
function money_widget_info() {
  return array(
    'money_widget' => array('label' => t('Currency and amount'), 'field types' => array('money')),
  );
}

/**
 * Implementation of hook_widget().
 */
function money_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  return array(
    '#type' => $field['widget']['type'],
    '#default_value' => (isset($items[$delta]) ? $items[$delta] : NULL),
  );
}

/**
 * Implementation of FAPI hook_elements().
 */
function money_elements() {
  return array(
    'money_widget' => array(
      '#input' => TRUE,
      '#columns' => array('amount', 'currency'),
      '#delta' => 0,
      '#process' => array('money_widget_process'),
    ),
  );
}

/**
 * Process an individual formatted_number element.
 */
function money_widget_process($element, $edit, $form_state, $form) {
  $field_name = $element['#field_name'];
  $field = $form['#field_info'][$field_name];

  // Amount reuses the formatted_number element process.
  $element = formatted_number_widget_process($element, $edit, $form_state, $form);
  $field_key = $element['#columns'][0];
  $element[$field_key]['#required'] = FALSE;
  unset($element[$field_key]['#title'], $element[$field_key]['#description']);

  // Currency uses a select list element.
  $field_key = $element['#columns'][1];
  $allowed_currencies = money_get_allowed_currencies($field);
  if (!$element['#required']) {
    $allowed_currencies = array('' => t('-- Select currency --')) + $allowed_currencies;
  }
  $element[$field_key] = array(
    '#type' => 'select',
    '#default_value' => (isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : array()),
    '#options' => $allowed_currencies,
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );

  return $element;
}

/**
 * Helper function to validate a money field.
 *
 * Validates the currency and its relation to the amount.
 * Both fields must be specified, or none.
 *
 * @param array $field
 *   The field array.
 * @param number $amount
 *   The number that should be validated.
 * @param number $currency
 *   The currency that should be validated.
 * @return array
 *   An array with error messages or empty if value is correct.
 */
function money_validate_field_value($field, $amount, $currency) {
  static $allowed_currencies;
  if (!isset($allowed_currencies)) {
    $allowed_currencies = money_get_allowed_currencies($field);
  }
  $errors = array();
  if (empty($currency)) {
    if ($field['required']) {
      $errors[] = t('%name: Currency is required.', array('%name' => t($field['widget']['label'])));
    }
    else if (is_numeric($amount)) {
      $errors[] = t('%name: Currency is required when an amount is specified.', array('%name' => t($field['widget']['label'])));
    }
  }
  else {
    if (!isset($allowed_currencies[$currency])) {
      if (!$field['required']) {
        $errors[] = t('%name: The currency %currency is not allowed.', array('%name' => t($field['widget']['label']), '%currency' => $currency));
      }
    }
    else if (!is_numeric($amount)) {
      $errors[] = t('%name: A valid amount is required when a currency is specified.', array('%name' => t($field['widget']['label'])));
    }
  }
  return $errors;
}

/**
 * Get list of allowed currencies for the given field.
 */
function money_get_allowed_currencies($field) {
  if (empty($field['allowed_currencies']) || !is_array($field['allowed_currencies'])) {
    return currency_api_get_list();
  }
  return array_intersect_key(currency_api_get_list(), array_filter($field['allowed_currencies']));
}

/**
 * Display a CCK Money field (widget).
 *
 * @ingroup themeable
 */
function theme_money_widget($element) {
  formatted_number_add_js();
  $children = '<div class="container-inline">'. $element['#children'] .'</div>';
  return theme('form_element', $element, $children);
}

/**
 * Display a CCK Money field (unformatted).
 *
 * @ingroup themeable
 */
function theme_money_formatter_unformatted($element) {
  // raw number + space + currency code.
  return $element['#item']['amount'] .' '. $element['#item']['currency'];
}

/**
 * Display a CCK Money field (formatted).
 *
 * @ingroup themeable
 */
function theme_money_formatter_generic($element) {
  $amount = $element['#item']['amount'];
  if (!is_numeric($amount)) {
    return '';
  }
  $field = content_fields($element['#field_name'], $element['#type_name']);
  $decimals = ($element['#formatter'] == 'nozeros' ? -1 : (isset($field['decimals']) ? (int)$field['decimals'] : 0));
  $formatted_number = format_number($amount, $decimals);

  // formatted number + no-break space + currency code.
  return $formatted_number ."\xC2\xA0". $element['#item']['currency'];
}
